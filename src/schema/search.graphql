# Queries

extend type Query {
  search(input: String!, include: [SearchInclude!], perPage: Int, cursor: ID): Page<SearchItem>!
}

# Types

interface SearchItem {
  score: Float!
  type: SearchItemType!
}

enum SearchItemType {
  FilmSearchItem
  ListSearchItem
  ReviewSearchItem
  MemberSearchItem
  ContributorSearchItem
  TagSearchItem
}

enum SearchInclude {
  ContributorSearchItem
  FilmSearchItem
  ListSearchItem
  MemberSearchItem
  ReviewSearchItem
  TagSearchItem
}

type FilmSearchItem implements SearchItem {
  score: Float!
  type: SearchItemType!

  film: Film!
}

type ListSearchItem implements SearchItem {
  score: Float!
  type: SearchItemType!

  list: List!
}

type ReviewSearchItem implements SearchItem {
  score: Float!
  type: SearchItemType!

  review: LogEntry!
}

type MemberSearchItem implements SearchItem {
  score: Float!
  type: SearchItemType!

  member: Member!
}

type ContributorSearchItem implements SearchItem {
  score: Float!
  type: SearchItemType!

  contributor: Contributor!
}

type TagSearchItem implements SearchItem {
  score: Float!
  type: SearchItemType!

  tag: String!
}
