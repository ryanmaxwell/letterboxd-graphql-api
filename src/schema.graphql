# Top-Level Queries

type Query {
  films(
    genre: ID
    decade: Int
    year: Int
    service: ID
    member: ID
    memberRelationship: FilmMemberRelationship
    includeFriends: IncludeFriends
    tagCode: String
    tagger: String
    includeTaggerFriends: IncludeFriends
    where: [FilmsWhere!]
    sort: FilmsSort
    perPage: Int
    cursor: ID
    ): [Film!]!
  
  film(id: ID!): Film

  filmStatistics(film: ID!): FilmStatistics
  
  relationshipToFilm(accessToken: String!, film: ID!): FilmRelationship
  
  filmCollection(
    id: ID!
    genre: ID
    decade: Int
    year: Int
    service: ID
    member: ID
    memberRelationship: FilmMemberRelationship
    includeFriends: IncludeFriends
    tagCode: String
    tagger: String
    includeTaggerFriends: IncludeFriends
    where: [FilmsWhere!]
    sort: FilmsSort
    ): FilmCollection
  
  # Private endpoint restricted to Letterboxd and approved partners only.
  # Access token optional, will be personalized to user's preferred stores if provided
  filmAvailability(accessToken: String, film: ID!): [FilmAvailability!]
  
  filmMembers(
    film: ID!
    member: ID
    memberRelationship: MemberRelationship
    filmRelationship: FilmMemberRelationship
    sort: MembersSort
    perPage: Int
    cursor: ID
    ): [MemberFilmRelationship!]
  
  lists(
    film: ID
    clonedFrom: ID
    member: ID
    memberRelationship: ListMemberRelationship
    includeFriends: IncludeFriends
    tagCode: String
    tagger: String
    includeTaggerFriends: IncludeFriends
    where: [ListsWhere!]
    filter: [ListsFilter!]
    sort: ListsSort
    perPage: Int
    cursor: ID
    ): [List!]!
  
  list(id: ID!): List

  listStatistics(list: ID!): ListStatistics

  listComments(list: ID!): [ListComment!]
  
  relationshipToList(accessToken: String!, list: ID!): ListRelationship
  
  logEntries(
    film: ID
    member: ID
    memberRelationship: LogEntryMemberRelationship
    filmMemberRelationship: FilmMemberRelationship
    includeFriends: IncludeFriends
    year: Int
    month: Int
    week: Int
    day: Int
    minRating: Float
    maxRating: Float
    filmDecade: Int
    filmYear: Int
    genre: ID
    tagCode: String
    tagger: String
    includeTaggerFriends: IncludeFriends
    service: ID
    where: [LogEntriesWhere!]
    sort: LogEntriesSort
    perPage: Int
    cursor: ID
    ): [LogEntry!]!
  
  logEntry(id: ID!): LogEntry

  reviewStatistics(logEntry: ID!): ReviewStatistics

  reviewComments(logEntry: ID!): [ReviewComment!]
  
  relationshipToReview(accessToken: String!, logEntry: ID!): ReviewRelationship

  # Auth

  generateToken(username: String!, password: String!):  AccessToken

  usernameCheck(username: String!): UsernameCheckResult

  # Members

  me(accessToken: String!): MemberAccount
  
  members(
    member: ID
    memberRelationship: MemberRelationship
    film: ID
    filmRelationship: FilmMemberRelationship
    list: ID
    review: ID
    sort: MembersSort
    perPage: Int
    cursor: ID
    ): [Member!]!
  
  member(id: ID!): Member

  memberStatistics(member: ID!): MemberStatistics

  memberLogEntryTags(member: ID!): [MemberTag!]

  memberListTags(member: ID!): [MemberTag!]

  watchlist(member: ID!
    genre: ID
    decade: Int
    year: Int
    service: ID
    memberRelationship: FilmMemberRelationship
    includeFriends: IncludeFriends
    tagCode: String
    tagger: String
    includeTaggerFriends: IncludeFriends
    where: [FilmsWhere!]
    sort: WatchlistSort
    perPage: Int
    cursor: ID): [Film!]
  
  contributor(id: ID!): Contributor
  
  contributions(
    contributor: ID!
    type: ContributionType
    genre: ID
    decade: Int
    year: Int
    service: ID
    member: ID
    memberRelationship: FilmMemberRelationship
    includeFriends: IncludeFriends
    tagCode: String
    tagger: String
    includeTaggerFriends: IncludeFriends
    where: [FilmsWhere!]
    sort: FilmContributionsSort
    perPage: Int
    cursor: ID
    ): [FilmContribution!]
  
  genres: [Genre!]!
  
  services: [Service!]!
  
  search(
    input: String!
    include: [SearchInclude!]
    perPage: Int
    cursor: ID
    ): [SearchItem!]!
}

# Films

type Film {
  id: ID!
  name: String!
  originalName: String
  alternativeNames: [String!]!
  releaseYear: Int
  filmCollectionId: ID
  backdropFocalPoint: Float
  genres: [Genre!]!
  directors: [Contributor!]!
  contributions(type: ContributionType): [FilmContributions!]!
  backdrop: Image
  poster: Image
  trailer: FilmTrailer
  links: [Link!]!
}

type Genre {
  id: ID!
  name: String!
}

type Service {
  id: ID!
  name: String!
}

type FilmTrailer {
  id: ID!
  url: String!
}

type Image {
  sizes: [ImageSize!]!
}

type ImageSize {
  width: Int!
  height: Int!
  url: String!
}

type Link {
  type: LinkType!
  id: ID!
  url: String!
}

enum LinkType {
  letterboxd
  tmdb
  imdb
  gwi
}

type FilmContributions {
  type: ContributionType
  contributors: [Contributor!]!
}

type MemberFilmRelationship {
  member: Member!
  relationship: FilmRelationship!
}

type FilmRelationship {
  watched: Boolean
  whenWatched: String
  liked: Boolean
  whenLiked: String
  favorited: Boolean
  inWatchlist: Boolean
  whenAddedToWatchlist: String
  whenCompletedInWatchlist: String
  rating: Float
  reviews: [ID!]!
  diaryEntries: [ID!]!
}

type FilmStatistics {
  film: FilmIdentifier!
  counts: FilmStatisticsCounts!
  rating: Float
  ratingsHistogram: [RatingsHistogramBar!]!
}

type FilmIdentifier {
  id: ID!
}

type FilmStatisticsCounts {
  watches: Int!
  likes: Int!
  ratings: Int!
  fans: Int!
  lists: Int!
  reviews: Int!
}

type RatingsHistogramBar {
  rating: Float!
  normalizedWeight: Float!
  count: Int!
}

enum FilmsSort {
  FilmName
  ReleaseDateLatestFirst
  ReleaseDateEarliestFirst
  AuthenticatedMemberRatingHighToLow
  AuthenticatedMemberRatingLowToHigh
  MemberRatingHighToLow
  MemberRatingLowToHigh
  AverageRatingHighToLow
  AverageRatingLowToHigh
  RatingHighToLow
  RatingLowToHigh
  FilmDurationShortestFirst
  FilmDurationLongestFirst
  FilmPopularity
  FilmPopularityThisWeek
  FilmPopularityThisMonth
  FilmPopularityThisYear
  FilmPopularityWithFriends
  FilmPopularityWithFriendsThisWeek
  FilmPopularityWithFriendsThisMonth
  FilmPopularityWithFriendsThisYear
}

enum FilmsWhere {
  Released
  NotReleased
  InWatchlist
  NotInWatchlist
  WatchedFromWatchlist
  Watched
  NotWatched
  FeatureLength
  NotFeatureLength
}

enum FilmMemberRelationship {
  Ignore
  Watched
  NotWatched
  Liked
  NotLiked
  InWatchlist
  NotInWatchlist
  Favorited
}

enum IncludeFriends {
  None
  All
  Only
}

# Film Collections

type FilmCollection {
  id: ID!
  name: String!
  films: [Film!]!
  links: [Link!]!
}

# Film Availability

type FilmAvailability {
  id: ID
  service: FilmAvailabilityService!
  displayName: String!
  country: String!
  url: String!
}

enum FilmAvailabilityService {
  Amazon
  AmazonVideo
  AmazonPrime
  iTunes
  Netflix
}

# Lists

type List {
  id: ID!
  name: String!
  filmCount: Int!
  published: Boolean!
  ranked: Boolean!
  hasEntriesWithNotes: Boolean!
  description: String
  descriptionLbml: String
  owner: Member!
  clonedFrom: List
  previewEntries: [ListEntrySummary!]!
  tags: [Tag!]!
  links: [Link!]!
  canShareOn: [SharingService!]
  sharedOn: [SharingService!]
  whenCreated: String!
  whenPublished: String
}

type ListRelationship {
  liked: Boolean!
  subscribed: Boolean!
  subscriptionState: CommentSubscriptionState!
  commentThreadState: CommentThreadState!
}

type ListEntrySummary {
  rank: Int
  film: Film!
}

type ListEntry {
  rank: Int
  notes: String
  notesLbml: String
  containsSpoilers: Boolean
  film: Film!
}

type ListStatistics {
  list: ListIdentifier!
  counts: ListStatisticsCounts!
}

type ListStatisticsCounts {
  comments: Int!
  likes: Int!
}

type ListIdentifier {
  id: ID!
}

enum CommentSubscriptionState {
  Subscribed
  NotSubscribed
  Unsubscribed
}

enum CommentThreadState {
  CanComment
  Banned
  Blocked
  NotCommentable
}

enum ListsSort {
  Date
  WhenPublishedLatestFirst
  WhenPublishedEarliestFirst
  WhenCreatedLatestFirst
  WhenCreatedEarliestFirst
  ListName
  ListPopularity
  ListPopularityThisWeek
  ListPopularityThisMonth
  ListPopularityThisYear
  ListPopularityWithFriends
  ListPopularityWithFriendsThisWeek
  ListPopularityWithFriendsThisMonth
  ListPopularityWithFriendsThisYear
}

enum ListMemberRelationship {
  Owner
  Liked
}

enum ListsWhere {
  Clean
  Published
  NotPublished
}

enum ListsFilter {
  NoDuplicateMembers
}

# Me

type AccessToken {
  access_token: String!
  token_type: String!
  refresh_token: String!
  expires_in: Int!
}

enum UsernameCheckResult {
  Available
  NotAvailable
  TooShort
  TooLong
  Invalid
}

type MemberAccount {
  emailAddress: String!
  emailAddressValidated: Boolean!
  privateAccount: Boolean!

  member: Member!
}

# Members

type Member {
  id: ID!
  username: String!
  givenName: String
  familyName: String
  shortName: String!
  displayName: String!
  memberStatus: MemberStatus!
  avatar: Image
  backdrop: Image
  pronoun: Pronoun
  bio: String
  bioLbml: String
  location: String
  website: String
  twitterUsername: String
  backdropFocalPoint: Float
  privateWatchlist: Boolean!
  favoriteFilms: [Film!]!
  pinnedReviews: [LogEntry!]
  links: [Link]
}

type MemberStatistics {
  member: MemberIdentifier!
  counts: MemberStatisticsCounts!
  ratingsHistogram: [RatingsHistogramBar!]
  yearsInReview: [Int!]!
}

type MemberIdentifier {
  id: ID!
}

type MemberStatisticsCounts {
  filmLikes: Int!
  listLikes: Int!
  reviewLikes: Int!
  watches: Int!
  ratings: Int!
  reviews: Int!
  diaryEntries: Int!
  diaryEntriesThisYear: Int!
  filmsInDiaryThisYear: Int!
  watchlist: Int!
  lists: Int!
  unpublishedLists: Int!
  followers: Int!
  following: Int!
  listTags: Int!
  filmTags: Int!
}

type MemberTag {
  code: String!
  displayTag: String!
  counts: MemberTagCounts!
}

type MemberTagCounts {
  films: Int!
  logEntries: Int!
  diaryEntries: Int!
  reviews: Int!
  lists: Int!
}

enum MemberStatus {
  Crew
  Patron
  Pro
  Member
}

type Pronoun {
  id: ID!
  label: String!
  subjectPronoun: String!
  objectPronoun: String!
  possessiveAdjective: String!
  possessivePronoun: String!
  reflexive: String!
}

enum MembersSort {
  Date
  Name
  MemberPopularity
  MemberPopularityThisWeek
  MemberPopularityThisMonth
  MemberPopularityThisYear
  MemberPopularityWithFriends
  MemberPopularityWithFriendsThisWeek
  MemberPopularityWithFriendsThisMonth
  MemberPopularityWithFriendsThisYear
}

enum MemberRelationship {
  IsFollowing
  IsFollowedBy
}

enum WatchlistSort {
  Added
  FilmName
  OwnerRatingHighToLow
  OwnerRatingLowToHigh
  AuthenticatedMemberRatingHighToLow
  AuthenticatedMemberRatingLowToHigh
  MemberRatingHighToLow
  MemberRatingLowToHigh
  AverageRatingHighToLow
  AverageRatingLowToHigh
  ReleaseDateLatestFirst
  ReleaseDateEarliestFirst
  FilmDurationShortestFirst
  FilmDurationLongestFirst
  FilmPopularity
  FilmPopularityThisWeek
  FilmPopularityThisMonth
  FilmPopularityThisYear
}

# Log Entries

type LogEntry {
  id: ID!
  name: String!
  owner: Member!
  film: Film!
  diaryDetails: DiaryDetails
  review: Review
  rating: Float
  like: Boolean!
  commentable: Boolean!
  tags: [Tag!]
  links: [Link!]
  whenCreated: String!
  whenUpdated: String!
}

type DiaryDetails {
  diaryDate: String!
  rewatch: Boolean!
}

type Review {
  lbml: String!
  text: String!
  containsSpoilers: Boolean!
  canShareOn: [SharingService!]
  sharedOn: [SharingService!]
  whenReviewed: String!
}

type ReviewRelationship {
  liked: Boolean!
  subscribed: Boolean!
  subscriptionState: CommentSubscriptionState!
  commentThreadState: CommentThreadState!
}

type ReviewStatistics {
  logEntry: ReviewIdentifier!
  counts: ReviewStatisticsCounts!
}

type ReviewIdentifier {
  id: ID!
}

type ReviewStatisticsCounts {
  comments: Int!
  likes: Int!
}

enum SharingService {
  Facebook
}

type Tag {
  code: String!
  displayTag: String!
}

enum LogEntryMemberRelationship {
  Ignore
  Owner
  Liked
}

enum LogEntriesSort {
  WhenAdded
  Date
  EntryRatingHighToLow
  EntryRatingLowToHigh
  RatingHighToLow
  RatingLowToHigh
  AuthenticatedMemberRatingHighToLow
  AuthenticatedMemberRatingLowToHigh
  MemberRatingHighToLow
  MemberRatingLowToHigh
  AverageRatingHighToLow
  AverageRatingLowToHigh
  ReleaseDateLatestFirst
  ReleaseDateEarliestFirst
  FilmName
  FilmDurationShortestFirst
  FilmDurationLongestFirst
  ReviewPopularity
  ReviewPopularityThisWeek
  ReviewPopularityThisMonth
  ReviewPopularityThisYear
  ReviewPopularityWithFriends
  ReviewPopularityWithFriendsThisWeek
  ReviewPopularityWithFriendsThisMonth
  ReviewPopularityWithFriendsThisYear
  FilmPopularity
  FilmPopularityThisWeek
  FilmPopularityThisMonth
  FilmPopularityThisYear
  FilmPopularityWithFriends
  FilmPopularityWithFriendsThisWeek
  FilmPopularityWithFriendsThisMonth
  FilmPopularityWithFriendsThisYear
}

enum LogEntriesWhere {
  HasDiaryDate
  HasReview
  Clean
  NoSpoilers
  Released
  NotReleased
  FeatureLength
  NotFeatureLength
  InWatchlist
  NotInWatchlist
  Watched
  NotWatched
  Rated
  NotRated
}

enum LogEntriesFilter {
  NoDuplicateMembers
}

# Comments

interface Comment {
  id: ID!
  type: CommentType!
  comment: String
  commentLbml: String
  deleted: Boolean!
  blocked: Boolean!
  blockedByOwner: Boolean!
  removedByAdmin: Boolean!
  member: Member!
  whenCreated: String!
  whenUpdated: String
  editableWindowExpiresIn: Int
}

type ListComment implements Comment {
  id: ID!
  type: CommentType!
  list: ListIdentifier!
  comment: String
  commentLbml: String
  deleted: Boolean!
  blocked: Boolean!
  blockedByOwner: Boolean!
  removedByAdmin: Boolean!
  member: Member!
  whenCreated: String!
  whenUpdated: String
  editableWindowExpiresIn: Int
}

type ReviewComment implements Comment {
  id: ID!
  type: CommentType!
  review: ReviewIdentifier!
  comment: String
  commentLbml: String
  deleted: Boolean!
  blocked: Boolean!
  blockedByOwner: Boolean!
  removedByAdmin: Boolean!
  member: Member!
  whenCreated: String!
  whenUpdated: String
  editableWindowExpiresIn: Int
}

enum CommentType {
  ListComment
  ReviewComment
}

# Contributors

type Contributor {
  id: ID!
  name: String!
  characterName: String
  statistics: ContributorStatistics!
  links: [Link!]!
}

type ContributorStatistics {
  contributions: [ContributionStatistics!]!
}

type ContributionStatistics {
  type: ContributionType!
  filmCount: Int!
}

enum ContributionType {
  Actor
  Studio
  Director
  Producer
  Writer
  Editor
  Cinematography
  ArtDirection
  VisualEffects
  Composer
  Sound
  Costumes
  MakeUp
}

type FilmContribution {
  type: ContributionType!
  film: Film!
  characterName: String
}

enum FilmContributionsSort {
  FilmName
  ReleaseDateLatestFirst
  ReleaseDateEarliestFirst
  AuthenticatedMemberRatingHighToLow
  AuthenticatedMemberRatingLowToHigh
  MemberRatingHighToLow
  MemberRatingLowToHigh
  AverageRatingHighToLow
  AverageRatingLowToHigh
  RatingHighToLow
  RatingLowToHigh
  FilmDurationShortestFirst
  FilmDurationLongestFirst
  FilmPopularity
  FilmPopularityThisWeek
  FilmPopularityThisMonth
  FilmPopularityThisYear
}

# Search

interface SearchItem {
  score: Float!
  type: SearchItemType!
}

enum SearchItemType {
  FilmSearchItem
  ListSearchItem
  ReviewSearchItem
  MemberSearchItem
  ContributorSearchItem
  TagSearchItem
}

type FilmSearchItem implements SearchItem {
  score: Float!
  type: SearchItemType!
  
  film: Film!
}

type ListSearchItem implements SearchItem {
  score: Float!
  type: SearchItemType!
  
  list: List!
}

type ReviewSearchItem implements SearchItem {
  score: Float!
  type: SearchItemType!
  
  review: LogEntry!
}

type MemberSearchItem implements SearchItem {
  score: Float!
  type: SearchItemType!
  
  member: Member!
}

type ContributorSearchItem implements SearchItem {
  score: Float!
  type: SearchItemType!
  
  contributor: Contributor!
}

type TagSearchItem implements SearchItem {
  score: Float!
  type: SearchItemType!
  
  tag: String!
}

# Search

enum SearchInclude {
  ContributorSearchItem
  FilmSearchItem
  ListSearchItem
  MemberSearchItem
  ReviewSearchItem
  TagSearchItem
}